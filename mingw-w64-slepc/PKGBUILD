# Contributor: Oleg A. Khlybov <fougas@mail.ru>

# This package provides multiple library build flavors differentiated by
# the 3-character suffix XYZ as follows:
#
#  * X is the scalar type based on the Netlib's SDCZ notation:
#    - A for multiprecision or precision-neutral build
#    - S for single precision real
#    - D for double precision real
#    - C for single precision complex
#    - Z for double precision complex
#
#  * Y is the execution model:
#    - S for sequential code
#    - M for MPI parallel code
#    - T for multithreaded code, either bare threading or OpenMP, OpenACC etc.
#    - H for heterogeneous code with CUDA, OpenCL etc.
#
#  * Z is the build type:
#    - O for optimized build
#    - G for debugging build
#
# The suffix is used in the static and dynamic libraires as well as in PkgConfig .pc files.
# That is the ZMO suffix designates the optimized MPI parallel double precision complex library flavor.
# Consider the `pkgconf slepc-zmo --cflags` command to obtain the build-specific compilation flags.

# There is a Tcl integration test suite for both package maintainers and package end users
# to ensure the installed package is intact. The test suite performs a series of compile/run
# tests for multiple configurations from the build matrix.
# Basic usage: tclsh $MINGW_PREFIX/share/test/slepc/slepc.tcl

_realname=slepc
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}")
pkgver=3.23.1
pkgrel=1
arch=('any')
mingw_arch=('mingw64' 'ucrt64' 'clang64' 'clangarm64')
pkgdesc="Scalable library for eigenvalue problem computations (mingw-w64)"
url="https://slepc.upv.es/"
msys2_repository_url="https://gitlab.com/slepc/slepc"
msys2_references=(
  'aur: slepc'
)
license=('spdx:BSD-2-Clause')
depends=("${MINGW_PACKAGE_PREFIX}-petsc"
         $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] || echo "${MINGW_PACKAGE_PREFIX}-gcc-libgfortran"))
makedepends=("python"
             "${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-pkgconf"
             $([[ ${CARCH} == aarch64 ]] || echo "${MINGW_PACKAGE_PREFIX}-msmpi")
             $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] || echo "${MINGW_PACKAGE_PREFIX}-fc")
             "${MINGW_PACKAGE_PREFIX}-petsc-build")
optdepends=("${MINGW_PACKAGE_PREFIX}-tcl: build & run test suite")
source=("https://slepc.upv.es/download/distrib/${_realname}-${pkgver}.tar.gz"
        'slepc.tcl'
        'testme-0.tm'
        'buildme-0.tm'
        'xyz-0.tm')
noextract=("${_realname}-${pkgver}.tar.gz")
sha256sums=('c2fde066521bbccfbc80aa15182bca69ffaf00a7de648459fd04b81589896238'
            '1c341cd82f6bd8db447a21f88ba81378605ca6b0eabc443212d53fad6113c9fe'
            '47aa9a8a03627ffeb299191ede391f5aa96071c1b09fb294ec6712e3beb0b799'
            'e9585cccd9269c9ff3d68a6f9bb313d4cd64b86e5cc8d7b1f2db585e53c7a04d'
            'b32516dbdf0db3007092cb7b31a0d42034b26e333212860d50d5e866cb346afe')

prepare() {
  mkdir -p $srcdir/build-${MSYSTEM} && cd $srcdir/build-${MSYSTEM}
  tar xzf $srcdir/${_realname}-${pkgver}.tar.gz
}

build() {
  . ${MINGW_PREFIX}/src/petsc/petsc

  cd  "${srcdir}/build-${MSYSTEM}/${_realname}-${pkgver}"

  declare extra_libs=""

  if [[ ${CARCH} != aarch64 ]]; then
    extra_libs="$(pkgconf msmpi --libs)"
  fi

  if [[ ${MINGW_PACKAGE_PREFIX} != *-clang-* ]]; then
    extra_libs+=" -lgfortran"
  fi

  for build in ${petsc_builds}; do
    export SLEPC_DIR=`pwd`
    export PETSC_ARCH=${build}
    export PETSC_DIR=${MINGW_PREFIX}/src/petsc
    /usr/bin/python configure
    make
    (
      cd ${build}/lib
      case ${build} in
        *o) strip -S *.a ;;
      esac
      ${CC} -shared -Wl,--enable-auto-import -Wl,--export-all-symbols \
        -o lib${_realname}-${build}.dll -Wl,--out-implib,lib${_realname}.dll.a \
        -Wl,--whole-archive lib${_realname}.a -Wl,--no-whole-archive \
        $(pkgconf petsc-${build} --libs) $(pkgconf openblas --libs) ${extra_libs}
    )
  done
}

package() {
  builddir="${srcdir}"/build-${MSYSTEM}/${_realname}-${pkgver}
  cd "${builddir}"
  mkdir -p "${pkgdir}"${MINGW_PREFIX}/{bin,lib/pkgconfig,lib/${_realname},include/${_realname},share/test/${_realname}}
  cd "${builddir}/include"
  cp -R * "${pkgdir}"${MINGW_PREFIX}/include/${_realname}
  cd "${pkgdir}"${MINGW_PREFIX}/include/${_realname}
  cd "${srcdir}"
  cp slepc.tcl {testme-0,buildme-0,xyz-0}.tm "${pkgdir}"${MINGW_PREFIX}/share/test/${_realname}
  cd "${builddir}/src/eps/tutorials"
  cp ex1.c ex1f.F90 "${pkgdir}"${MINGW_PREFIX}/share/test/${_realname}
  for build in ${petsc_builds}; do
    cd "${builddir}/${build}/lib"
    mkdir -p "${pkgdir}"${MINGW_PREFIX}/lib/${_realname}/${build}
    cp *.a "${pkgdir}"${MINGW_PREFIX}/lib/${_realname}/${build}
    cp *.dll "${pkgdir}"${MINGW_PREFIX}/bin
    cd "${builddir}/${build}/include"
    mkdir -p "${pkgdir}"${MINGW_PREFIX}/include/${_realname}/${build}
    cp -R * "${pkgdir}"${MINGW_PREFIX}/include/${_realname}/${build}
    if [[ ${MINGW_PACKAGE_PREFIX} != *-clang-* ]]; then
      cp *.mod "${pkgdir}"${MINGW_PREFIX}/include/${_realname}/${build}
    fi
    case ${build} in
      ?m?) desc="MPI parallel";;
      ?t?) desc="OpenMP multithreaded";;
      ?s?) desc="Sequential";;
    esac
    case ${build} in
      z*|d*) desc="$desc double precision";;
      c*|s*) desc="$desc single precision";;
    esac
    case ${build} in
      z*|c*) desc="$desc complex";;
    esac
    echo "
      prefix=${MINGW_PREFIX}
      libdir=\${prefix}/lib/${_realname}
      includedir=\${prefix}/include/${_realname}
      Name: ${_realname}
      URL: ${url}
      Version: ${pkgver}
      Description: ${desc} SLEPc build
      Requires: petsc-${build}
      Cflags: -I\${includedir}/${build} -I\${includedir}
      Libs: -L\${libdir}/${build} -l${_realname}
    " | sed '/^\s*$/d;s/^\s*//' > "${pkgdir}"${MINGW_PREFIX}/lib/pkgconfig/${_realname}-${build}.pc
  done
  cd "${pkgdir}"${MINGW_PREFIX}/include
  find . \( ! \( -name '*.h' -o -name '*.mod' \) -a -type f \) -delete
}
